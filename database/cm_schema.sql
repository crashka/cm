-- Table: public.ensemble

-- DROP TABLE IF EXISTS public.ensemble;

CREATE TABLE IF NOT EXISTS public.ensemble
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text NOT NULL,
    raw_name text,
    ens_type text,
    ens_name text,
    ens_location text,
    tags text[],
    is_canonical boolean,
    cnl_ensemble_id integer,
    arkiv_uri text,
    CONSTRAINT ensemble_pkey PRIMARY KEY (id),
    CONSTRAINT ensemble_name_key UNIQUE (name),
    CONSTRAINT ensemble_cnl_ensemble_id_fkey FOREIGN KEY (cnl_ensemble_id)
        REFERENCES public.ensemble (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.ensemble
    OWNER to crash;

-- Table: public.entity_ref

-- DROP TABLE IF EXISTS public.entity_ref;

CREATE TABLE IF NOT EXISTS public.entity_ref
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    entity_ref text NOT NULL,
    entity_type text NOT NULL,
    ref_source text,
    addl_ref text,
    source_data jsonb,
    is_raw boolean,
    is_entity boolean,
    mstr_entity_name text,
    mstr_entity_id integer,
    entity_strength integer,
    ref_strength integer,
    CONSTRAINT entity_ref_pkey PRIMARY KEY (id),
    CONSTRAINT entity_ref_entity_ref_entity_type_ref_source_key UNIQUE (entity_ref, entity_type, ref_source),
    CONSTRAINT entity_ref_mstr_entity_id_fkey FOREIGN KEY (mstr_entity_id)
        REFERENCES public.entity_ref (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.entity_ref
    OWNER to crash;

-- Table: public.entity_string

-- DROP TABLE IF EXISTS public.entity_string;

CREATE TABLE IF NOT EXISTS public.entity_string
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    entity_str text NOT NULL,
    source_fld text NOT NULL,
    parsed_data jsonb,
    station_id integer,
    prog_play_id integer,
    play_id integer,
    CONSTRAINT entity_string_pkey PRIMARY KEY (id),
    CONSTRAINT entity_string_entity_str_source_fld_station_id_key UNIQUE (entity_str, source_fld, station_id),
    CONSTRAINT entity_string_play_id_fkey FOREIGN KEY (play_id)
        REFERENCES public.play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT entity_string_prog_play_id_fkey FOREIGN KEY (prog_play_id)
        REFERENCES public.program_play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT entity_string_station_id_fkey FOREIGN KEY (station_id)
        REFERENCES public.station (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.entity_string
    OWNER to crash;

-- Table: public.performance

-- DROP TABLE IF EXISTS public.performance;

CREATE TABLE IF NOT EXISTS public.performance
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    work_id integer NOT NULL,
    performer_ids integer[],
    ensemble_ids integer[],
    conductor_id integer,
    recording_id integer,
    notes text[],
    CONSTRAINT performance_pkey PRIMARY KEY (id),
    CONSTRAINT performance_work_id_performer_ids_ensemble_ids_conductor_id_key UNIQUE (work_id, performer_ids, ensemble_ids, conductor_id),
    CONSTRAINT performance_conductor_id_fkey FOREIGN KEY (conductor_id)
        REFERENCES public.person (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT performance_recording_id_fkey FOREIGN KEY (recording_id)
        REFERENCES public.recording (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT performance_work_id_fkey FOREIGN KEY (work_id)
        REFERENCES public.work (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.performance
    OWNER to crash;

-- Table: public.performer

-- DROP TABLE IF EXISTS public.performer;

CREATE TABLE IF NOT EXISTS public.performer
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    person_id integer NOT NULL,
    role text,
    raw_role text,
    cnl_performer_id integer,
    CONSTRAINT performer_pkey PRIMARY KEY (id),
    CONSTRAINT performer_person_id_role_key UNIQUE (person_id, role),
    CONSTRAINT performer_cnl_performer_id_fkey FOREIGN KEY (cnl_performer_id)
        REFERENCES public.performer (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT performer_person_id_fkey FOREIGN KEY (person_id)
        REFERENCES public.person (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.performer
    OWNER to crash;

-- Table: public.person

-- DROP TABLE IF EXISTS public.person;

CREATE TABLE IF NOT EXISTS public.person
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text NOT NULL,
    raw_name text,
    prefix text,
    first_name text,
    middle_name text,
    last_name text,
    suffix text,
    full_name text,
    tags text[],
    is_composer boolean,
    is_conductor boolean,
    is_performer boolean,
    is_canonical boolean,
    cnl_person_id integer,
    arkiv_uri text,
    CONSTRAINT person_pkey PRIMARY KEY (id),
    CONSTRAINT person_full_name_key UNIQUE (full_name),
    CONSTRAINT person_name_key UNIQUE (name),
    CONSTRAINT person_cnl_person_id_fkey FOREIGN KEY (cnl_person_id)
        REFERENCES public.person (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.person
    OWNER to crash;

-- Table: public.play

-- DROP TABLE IF EXISTS public.play;

CREATE TABLE IF NOT EXISTS public.play
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    station_id integer NOT NULL,
    prog_play_id integer,
    play_info jsonb NOT NULL,
    play_date date NOT NULL,
    play_start time without time zone NOT NULL,
    play_end time without time zone,
    play_dur interval,
    program_id integer,
    composer_id integer,
    work_id integer,
    performer_ids integer[],
    ensemble_ids integer[],
    conductor_id integer,
    recording_id integer,
    mstr_play_id integer,
    tags text[],
    notes text[],
    ext_id text,
    ext_mstr_id text,
    start_time timestamp with time zone,
    end_time timestamp with time zone,
    duration interval,
    CONSTRAINT play_pkey PRIMARY KEY (id),
    CONSTRAINT play_station_id_play_date_play_start_work_id_key UNIQUE (station_id, play_date, play_start, work_id),
    CONSTRAINT play_composer_id_fkey FOREIGN KEY (composer_id)
        REFERENCES public.person (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_conductor_id_fkey FOREIGN KEY (conductor_id)
        REFERENCES public.person (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_mstr_play_id_fkey FOREIGN KEY (mstr_play_id)
        REFERENCES public.play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_prog_play_id_fkey FOREIGN KEY (prog_play_id)
        REFERENCES public.program_play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_program_id_fkey FOREIGN KEY (program_id)
        REFERENCES public.program (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_recording_id_fkey FOREIGN KEY (recording_id)
        REFERENCES public.recording (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_station_id_fkey FOREIGN KEY (station_id)
        REFERENCES public.station (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_work_id_fkey FOREIGN KEY (work_id)
        REFERENCES public.work (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.play
    OWNER to crash;

-- Table: public.play_ensemble

-- DROP TABLE IF EXISTS public.play_ensemble;

CREATE TABLE IF NOT EXISTS public.play_ensemble
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    play_id integer NOT NULL,
    ensemble_id integer NOT NULL,
    mstr_play_ens_id integer,
    notes text[],
    CONSTRAINT play_ensemble_pkey PRIMARY KEY (id),
    CONSTRAINT play_ensemble_play_id_ensemble_id_key UNIQUE (play_id, ensemble_id),
    CONSTRAINT play_ensemble_ensemble_id_fkey FOREIGN KEY (ensemble_id)
        REFERENCES public.ensemble (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_ensemble_mstr_play_ens_id_fkey FOREIGN KEY (mstr_play_ens_id)
        REFERENCES public.play_ensemble (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_ensemble_play_id_fkey FOREIGN KEY (play_id)
        REFERENCES public.play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.play_ensemble
    OWNER to crash;

-- Table: public.play_performer

-- DROP TABLE IF EXISTS public.play_performer;

CREATE TABLE IF NOT EXISTS public.play_performer
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    play_id integer NOT NULL,
    performer_id integer NOT NULL,
    mstr_play_perf_id integer,
    notes text[],
    CONSTRAINT play_performer_pkey PRIMARY KEY (id),
    CONSTRAINT play_performer_play_id_performer_id_key UNIQUE (play_id, performer_id),
    CONSTRAINT play_performer_mstr_play_perf_id_fkey FOREIGN KEY (mstr_play_perf_id)
        REFERENCES public.play_performer (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_performer_performer_id_fkey FOREIGN KEY (performer_id)
        REFERENCES public.performer (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_performer_play_id_fkey FOREIGN KEY (play_id)
        REFERENCES public.play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.play_performer
    OWNER to crash;

-- Table: public.play_seq

-- DROP TABLE IF EXISTS public.play_seq;

CREATE TABLE IF NOT EXISTS public.play_seq
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    seq_hash bigint NOT NULL,
    hash_level integer NOT NULL,
    hash_type integer NOT NULL,
    play_id integer NOT NULL,
    station_id integer,
    program_name text,
    program_id integer,
    prog_play_id integer,
    CONSTRAINT play_seq_pkey PRIMARY KEY (id),
    CONSTRAINT play_seq_hash_level_hash_type_play_id_key UNIQUE (hash_level, hash_type, play_id),
    CONSTRAINT play_seq_play_id_fkey FOREIGN KEY (play_id)
        REFERENCES public.play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_seq_prog_play_id_fkey FOREIGN KEY (prog_play_id)
        REFERENCES public.program_play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_seq_program_id_fkey FOREIGN KEY (program_id)
        REFERENCES public.program (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_seq_station_id_fkey FOREIGN KEY (station_id)
        REFERENCES public.station (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.play_seq
    OWNER to crash;
-- Index: play_seq_seq_hash

-- DROP INDEX IF EXISTS public.play_seq_seq_hash;

CREATE INDEX IF NOT EXISTS play_seq_seq_hash
    ON public.play_seq USING btree
    (seq_hash ASC NULLS LAST)
    TABLESPACE pg_default;

-- Table: public.play_seq_match

-- DROP TABLE IF EXISTS public.play_seq_match;

CREATE TABLE IF NOT EXISTS public.play_seq_match
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    seq_len integer NOT NULL,
    seq_time integer,
    pub_start_play_id integer NOT NULL,
    pub_end_play_id integer NOT NULL,
    sub_start_play_id integer NOT NULL,
    sub_end_play_id integer NOT NULL,
    pub_station_id integer,
    sub_station_id integer,
    pub_program_name text,
    CONSTRAINT play_seq_match_pkey PRIMARY KEY (id),
    CONSTRAINT play_seq_match_pub_end_play_id_fkey FOREIGN KEY (pub_end_play_id)
        REFERENCES public.play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_seq_match_pub_start_play_id_fkey FOREIGN KEY (pub_start_play_id)
        REFERENCES public.play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_seq_match_pub_station_id_fkey FOREIGN KEY (pub_station_id)
        REFERENCES public.station (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_seq_match_sub_end_play_id_fkey FOREIGN KEY (sub_end_play_id)
        REFERENCES public.play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_seq_match_sub_start_play_id_fkey FOREIGN KEY (sub_start_play_id)
        REFERENCES public.play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT play_seq_match_sub_station_id_fkey FOREIGN KEY (sub_station_id)
        REFERENCES public.station (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.play_seq_match
    OWNER to crash;

-- Table: public.program

-- DROP TABLE IF EXISTS public.program;

CREATE TABLE IF NOT EXISTS public.program
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text NOT NULL,
    host_name text,
    is_syndicated boolean,
    station_id integer,
    tags text[],
    notes text[],
    ext_id text,
    ext_mstr_id text,
    synd_level integer,
    mstr_program_id integer,
    website text,
    CONSTRAINT program_pkey PRIMARY KEY (id),
    CONSTRAINT program_name_host_name_key UNIQUE (name, host_name),
    CONSTRAINT program_mstr_program_id_fkey FOREIGN KEY (mstr_program_id)
        REFERENCES public.program (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT program_station_id_fkey FOREIGN KEY (station_id)
        REFERENCES public.station (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.program
    OWNER to crash;

-- Table: public.program_play

-- DROP TABLE IF EXISTS public.program_play;

CREATE TABLE IF NOT EXISTS public.program_play
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    station_id integer NOT NULL,
    prog_play_info jsonb NOT NULL,
    prog_play_date date NOT NULL,
    prog_play_start time without time zone NOT NULL,
    prog_play_end time without time zone,
    prog_play_dur interval,
    program_id integer,
    mstr_prog_play_id integer,
    tags text[],
    notes text[],
    ext_id text,
    ext_mstr_id text,
    start_time timestamp with time zone,
    end_time timestamp with time zone,
    duration interval,
    CONSTRAINT program_play_pkey PRIMARY KEY (id),
    CONSTRAINT program_play_station_id_prog_play_date_prog_play_start_prog_key UNIQUE (station_id, prog_play_date, prog_play_start, program_id),
    CONSTRAINT program_play_mstr_prog_play_id_fkey FOREIGN KEY (mstr_prog_play_id)
        REFERENCES public.program_play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT program_play_program_id_fkey FOREIGN KEY (program_id)
        REFERENCES public.program (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT program_play_station_id_fkey FOREIGN KEY (station_id)
        REFERENCES public.station (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.program_play
    OWNER to crash;

-- Table: public.recording

-- DROP TABLE IF EXISTS public.recording;

CREATE TABLE IF NOT EXISTS public.recording
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text,
    label text,
    catalog_no text,
    release_date date,
    arkiv_uri text,
    CONSTRAINT recording_pkey PRIMARY KEY (id),
    CONSTRAINT recording_label_catalog_no_key UNIQUE (label, catalog_no)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.recording
    OWNER to crash;

-- Table: public.station

-- DROP TABLE IF EXISTS public.station;

CREATE TABLE IF NOT EXISTS public.station
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name text NOT NULL,
    timezone text NOT NULL,
    location text,
    frequency text,
    website text,
    tags text[],
    notes text[],
    ext_id text,
    ext_mstr_id text,
    synd_level integer DEFAULT 10,
    CONSTRAINT station_pkey PRIMARY KEY (id),
    CONSTRAINT station_name_key UNIQUE (name)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.station
    OWNER to crash;

-- Table: public.to_do_list

-- DROP TABLE IF EXISTS public.to_do_list;

CREATE TABLE IF NOT EXISTS public.to_do_list
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    action text NOT NULL,
    depends_on text,
    status text NOT NULL,
    station_id integer,
    prog_play_id integer,
    play_id integer,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT to_do_list_pkey PRIMARY KEY (id),
    CONSTRAINT to_do_list_play_id_fkey FOREIGN KEY (play_id)
        REFERENCES public.play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT to_do_list_prog_play_id_fkey FOREIGN KEY (prog_play_id)
        REFERENCES public.program_play (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT to_do_list_station_id_fkey FOREIGN KEY (station_id)
        REFERENCES public.station (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.to_do_list
    OWNER to crash;

-- Table: public.work

-- DROP TABLE IF EXISTS public.work;

CREATE TABLE IF NOT EXISTS public.work
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    composer_id integer NOT NULL,
    name text NOT NULL,
    raw_name text,
    work_type text,
    work_name text,
    work_key text,
    catalog_no text,
    tags text[],
    is_canonical boolean,
    cnl_work_id integer,
    arkiv_uri text,
    CONSTRAINT work_pkey PRIMARY KEY (id),
    CONSTRAINT work_composer_id_name_key UNIQUE (composer_id, name),
    CONSTRAINT work_cnl_work_id_fkey FOREIGN KEY (cnl_work_id)
        REFERENCES public.work (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT work_composer_id_fkey FOREIGN KEY (composer_id)
        REFERENCES public.person (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.work
    OWNER to crash;
